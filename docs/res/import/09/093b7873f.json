[{"__type__":"cc.Material","_effectAsset":{"__uuid__":"abwstieFJFJakN1HRIe4jy"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"diffuseTexture":{"__uuid__":"a4XC6e27FNgq7obun07O/i"}}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"abwstieFJFJakN1HRIe4jy"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"diffuseTexture":{"__uuid__":"f7o8kIlNZBBq1kEtRDG4X0"}}},{"__type__":"cc.AnimationClip","_name":"directionArrow","_duration":1,"sample":10,"wrapMode":2,"curveData":{"props":{"position":[{"frame":0.1,"value":[0,0,0]},{"frame":0.2,"value":[0,1,0]},{"frame":0.3,"value":[0,2,0]},{"frame":0.4,"value":[0,3,0]},{"frame":0.5,"value":[0,4,0]},{"frame":0.6,"value":[0,3,0]},{"frame":0.7,"value":[0,2,0]},{"frame":0.8,"value":[0,1,0]},{"frame":0.9,"value":[0,0,0]},{"frame":1,"value":[0,0,0]}]}}},[{"__type__":"cc.Prefab","_name":"module_floor","data":{"__id__":1}},{"__type__":"cc.Node","_name":"module_floor","_children":[{"__id__":2},{"__id__":4}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"24s4zKX1RA4bs8nG+wX/39"},"fileId":"69q986XvpDrZOZN8wGNUEH"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"RootNode","_parent":{"__id__":1},"_children":[{"__id__":3}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"24s4zKX1RA4bs8nG+wX/39"},"fileId":"9eBO6fBXVG1quVSX6ep1rs"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,10,10,10]},"_is3DNode":true},{"__type__":"cc.Node","_name":"Floor_1","_parent":{"__id__":2},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":3},"_materials":[{"__uuid__":"15DBOM6ZtLlr3Oe9DBowbR"}],"_mesh":{"__uuid__":"deCIp6zs9Joq1B9bWtHl6N"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"24s4zKX1RA4bs8nG+wX/39"},"fileId":"9fBuxVGYxHjIU4fjnH3X/N"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0.7071067811865475,0,0,0.7071067811865476,100,100,100]},"_eulerAngles":{"__type__":"cc.Vec3","x":90},"_is3DNode":true},{"__type__":"cc.Node","_name":"RootNode copy","_parent":{"__id__":1},"_children":[{"__id__":5}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"24s4zKX1RA4bs8nG+wX/39"},"fileId":"102yBNrbdDp5/G74u3834a"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,100,0,0,0,0,1,10,10,10]},"_is3DNode":true},{"__type__":"cc.Node","_name":"Floor_1","_parent":{"__id__":4},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":5},"_materials":[{"__uuid__":"15DBOM6ZtLlr3Oe9DBowbR"}],"_mesh":{"__uuid__":"deCIp6zs9Joq1B9bWtHl6N"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"24s4zKX1RA4bs8nG+wX/39"},"fileId":"e4vks/g/xOe7IBCZ7/kJb1"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,-0.7071067811865475,0,0,0.7071067811865476,100,100,100]},"_eulerAngles":{"__type__":"cc.Vec3","x":-90},"_is3DNode":true}],{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_disabled","texture":"71VhFCTINJM6/Ky3oX9nBT","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"abwstieFJFJakN1HRIe4jy"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"diffuseTexture":{"__uuid__":"d0NfDMpBZOUZPph5eCwqek"}}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"abwstieFJFJakN1HRIe4jy"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"diffuseTexture":{"__uuid__":"a4XC6e27FNgq7obun07O/i"}}},[{"__type__":"cc.Prefab","_name":"module_core_2_straight","data":{"__id__":1}},{"__type__":"cc.Node","_name":"module_core_2_straight","_children":[{"__id__":2}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"31Lv8OlodOKJgQdXWV2Oc/"},"fileId":"f8uzY4IFtKhoc4nxGCVI+7"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"RootNode","_parent":{"__id__":1},"_children":[{"__id__":3}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"31Lv8OlodOKJgQdXWV2Oc/"},"fileId":"c6H0VJTVlLaK/wFkV1zIN0"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,10,10,10]},"_is3DNode":true},{"__type__":"cc.Node","_name":"core_3","_parent":{"__id__":2},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":3},"_materials":[{"__uuid__":"2fM3HyUeRP8YWadMUVvKyB"}],"_mesh":{"__uuid__":"428fpJvaRIo6Dm8ZGjsuuo"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"31Lv8OlodOKJgQdXWV2Oc/"},"fileId":"dcjIe1KuBONLgpT3+feezT"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,5,0,-0.7071067811865475,0,0,0.7071067811865476,100,100,100]},"_eulerAngles":{"__type__":"cc.Vec3","x":-90},"_is3DNode":true}],{"__type__":"cc.SpriteFrame","content":{"name":"Arrow","texture":"26A05f92RLkIyqw5nrE0vz","rect":[0,0,83,76],"offset":[0,0],"originalSize":[83,76],"capInsets":[0,0,0,0]}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":256},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":8}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":256,"length":24}}],"_minPos":{"__type__":"cc.Vec3","x":-0.00413776375353336,"y":-0.0305261742323637,"z":-0.0500000044703484},"_maxPos":{"__type__":"cc.Vec3","x":0.00413776375353336,"y":0.0305261835455894,"z":0.0500000081956387}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":256},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":8}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":256,"length":24}}],"_minPos":{"__type__":"cc.Vec3","x":-0.0194791741669178,"y":-0.0041499468497932,"z":-0.050000037997961},"_maxPos":{"__type__":"cc.Vec3","x":0.0194791927933693,"y":0.00414993893355131,"z":0.050000037997961}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":1024},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":32}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":1024,"length":156}}],"_minPos":{"__type__":"cc.Vec3","x":-0.0117993094027042,"y":-0.0194792486727238,"z":-0.0500000081956387},"_maxPos":{"__type__":"cc.Vec3","x":0.0117993094027042,"y":0.019479239359498,"z":0.0500000081956387}},[{"__type__":"cc.Prefab","_name":"module_core_4","data":{"__id__":1}},{"__type__":"cc.Node","_name":"module_core_4","_children":[{"__id__":2}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"49CUjLCs1KCboNoD7vihEN"},"fileId":"2d6bVvxYJA8Lrep+qlV69d"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"RootNode","_parent":{"__id__":1},"_children":[{"__id__":3}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"49CUjLCs1KCboNoD7vihEN"},"fileId":"05OeCdE7NPXqyp0jC7XgJQ"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,10,10,10]},"_is3DNode":true},{"__type__":"cc.Node","_name":"core_6","_parent":{"__id__":2},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":3},"_materials":[{"__uuid__":"a1DKHg7TlFhIcrkbrmvNsL"}],"_mesh":{"__uuid__":"88LG/dCvZEJ4IshQLSm8wB"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"49CUjLCs1KCboNoD7vihEN"},"fileId":"7bct9/tu5CzYyta9YykT+m"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,5,0,-0.7071067811865475,0,0,0.7071067811865476,100,100,100]},"_eulerAngles":{"__type__":"cc.Vec3","x":-90},"_is3DNode":true}],[{"__type__":"cc.SceneAsset","_name":"Main","scene":{"__id__":1},"asyncLoadAssets":null},{"__type__":"cc.Scene","_name":"New Node","_children":[{"__id__":2},{"__id__":15}],"_active":false,"_anchorPoint":{"__type__":"cc.Vec2"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"autoReleaseAssets":false},{"__type__":"cc.Node","_name":"Canvas","_parent":{"__id__":1},"_children":[{"__id__":3},{"__id__":4},{"__id__":5},{"__id__":10}],"_components":[{"__type__":"cc.Canvas","node":{"__id__":2},"_designResolution":{"__type__":"cc.Size","width":750,"height":1334}}],"_contentSize":{"__type__":"cc.Size","width":750,"height":1334},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[375,667,0,0,0,0,1,1,1,1]},"_id":"d8XRScHDtBj7HCL7lQa2di"},{"__type__":"cc.Node","_name":"Main Camera","_parent":{"__id__":2},"_components":[{"__type__":"cc.Camera","node":{"__id__":3},"_cullingMask":-7,"_clearFlags":2,"_depth":2}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,1155.2778886484411,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"StateMgr","_parent":{"__id__":2},"_components":[{"__type__":"3fe113Sft1Kp6CK0MNJ6REI","node":{"__id__":4},"StatePreload":{"__id__":5},"StateIngame":{"__id__":10}}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[-480,-320,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"StatePreload","_parent":{"__id__":2},"_children":[{"__id__":6},{"__id__":9}],"_active":false,"_components":[{"__type__":"cc.Widget","node":{"__id__":5},"_alignFlags":45},{"__type__":"033d2Qnzt9Cf7MdkLZnMGSF","node":{"__id__":5},"StateMgr":{"__id__":4}}],"_contentSize":{"__type__":"cc.Size","width":1334,"height":750},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"Button_Play","_parent":{"__id__":5},"_children":[{"__id__":7}],"_components":[{"__type__":"cc.Button","node":{"__id__":6},"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":5},"_componentId":"033d2Qnzt9Cf7MdkLZnMGSF","handler":"OnClickButtonPlay"}],"_N$transition":2,"transition":2,"_N$normalColor":{"__type__":"cc.Color","r":230,"g":230,"b":230},"_N$pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"_N$disabledColor":{"__type__":"cc.Color","r":120,"g":120,"b":120,"a":200},"_N$normalSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_N$pressedSprite":{"__uuid__":"e97GVMl6JHh5Ml5qEDdSGa"},"pressedSprite":{"__uuid__":"e97GVMl6JHh5Ml5qEDdSGa"},"_N$hoverSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"hoverSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_N$disabledSprite":{"__uuid__":"29FYIk+N1GYaeWH/q1NxQO"},"_N$target":{"__id__":7}}],"_contentSize":{"__type__":"cc.Size","width":200,"height":100},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"Background","_parent":{"__id__":6},"_children":[{"__id__":8}],"_components":[{"__type__":"cc.Sprite","node":{"__id__":7},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_type":1,"_sizeMode":0},{"__type__":"cc.Widget","node":{"__id__":7},"alignMode":0,"_alignFlags":45,"_originalWidth":100,"_originalHeight":40}],"_contentSize":{"__type__":"cc.Size","width":200,"height":100},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"Label","_parent":{"__id__":7},"_components":[{"__type__":"cc.Label","node":{"__id__":8},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_useOriginalSize":false,"_string":"PLAY","_N$string":"PLAY","_fontSize":60,"_lineHeight":60,"_enableWrapText":false,"_N$horizontalAlign":1,"_N$verticalAlign":1,"_N$overflow":1},{"__type__":"cc.Widget","node":{"__id__":8},"_alignFlags":45,"_originalWidth":100,"_originalHeight":40}],"_color":{"__type__":"cc.Color"},"_contentSize":{"__type__":"cc.Size","width":200,"height":100},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"New Label","_parent":{"__id__":5},"_components":[{"__type__":"cc.Label","node":{"__id__":9},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_useOriginalSize":false,"_string":"Preload","_N$string":"Preload","_N$horizontalAlign":1,"_N$verticalAlign":1},{"__type__":"cc.Widget","node":{"__id__":9},"_alignFlags":17}],"_contentSize":{"__type__":"cc.Size","width":137.87,"height":50.4},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,349.8,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"StateIngame","_parent":{"__id__":2},"_children":[{"__id__":11},{"__id__":12},{"__id__":23}],"_components":[{"__type__":"cc.Widget","node":{"__id__":10},"_alignFlags":45},{"__type__":"c55191EqAlKXIolGUlUkRgo","node":{"__id__":10},"GameWorld":{"__id__":15},"ObjectMgr":{"__id__":19},"Player":{"__id__":14}}],"_contentSize":{"__type__":"cc.Size","width":750,"height":1334},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"New Label","_parent":{"__id__":10},"_components":[{"__type__":"cc.Label","node":{"__id__":11},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_useOriginalSize":false,"_string":"Ingame","_N$string":"Ingame","_N$horizontalAlign":1,"_N$verticalAlign":1},{"__type__":"cc.Widget","node":{"__id__":11},"_alignFlags":17}],"_contentSize":{"__type__":"cc.Size","width":133.42,"height":50.4},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,641.8,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"Button_Move","_parent":{"__id__":10},"_children":[{"__id__":13}],"_components":[{"__type__":"cc.Button","node":{"__id__":12},"_normalMaterial":{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"},"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":14},"_componentId":"f5a32u/er1HiqWV1xVqlRdy","handler":"moveForward"}],"_N$transition":3,"transition":3,"_N$normalColor":{"__type__":"cc.Color","r":230,"g":230,"b":230},"_N$pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"_N$disabledColor":{"__type__":"cc.Color","r":120,"g":120,"b":120,"a":200},"_N$normalSprite":{"__uuid__":"39kWbA2DBCYLOVdRAyted3"},"_N$target":{"__id__":13}},{"__type__":"cc.Widget","node":{"__id__":12},"_target":{"__id__":2},"_alignFlags":20,"_bottom":209.613}],"_contentSize":{"__type__":"cc.Size","width":83,"height":76},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,-419.387,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"arrow","_parent":{"__id__":12},"_components":[{"__type__":"cc.Sprite","node":{"__id__":13},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"39kWbA2DBCYLOVdRAyted3"},"_type":1,"_sizeMode":0},{"__type__":"cc.Animation","node":{"__id__":13},"_defaultClip":{"__uuid__":"23JR7mKFBMsIoQkxx6xaiX"},"_clips":[{"__uuid__":"23JR7mKFBMsIoQkxx6xaiX"}],"playOnLoad":true}],"_color":{"__type__":"cc.Color","r":230,"g":230,"b":230},"_contentSize":{"__type__":"cc.Size","width":83,"height":76},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"Player","_parent":{"__id__":15},"_children":[{"__id__":20},{"__id__":22}],"_components":[{"__type__":"f5a32u/er1HiqWV1xVqlRdy","node":{"__id__":14},"_enabled":false,"ObjectMgr":{"__id__":19},"moveButton":{"__id__":12},"moveSpeed":50,"wobbingInterval":0.2,"icon360":{"__id__":23}},{"__type__":"31fd7OfupVBVIQvbmCxk9/k","node":{"__id__":14},"attackStats":{"__type__":"AttackStats"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":14},"asset":{"__uuid__":"fekXTZH1pAHqkmwmSr34+h"},"fileId":"5blN/kGSxFe5tIue374Szy"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[50,0,50,0,0,0,1,1,1,1]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"GameWorld","_parent":{"__id__":1},"_children":[{"__id__":16},{"__id__":17},{"__id__":18},{"__id__":19},{"__id__":14}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1,"_id":"33hpOq8tdDRYrcINf7Mk+L"},{"__type__":"cc.Node","_name":"CameraMiniMap","_parent":{"__id__":15},"_components":[{"__type__":"cc.Camera","node":{"__id__":16},"_cullingMask":-4,"_clearFlags":2,"_depth":2,"_orthoSize":500,"_nearClip":0.1,"_rect":{"__type__":"cc.Rect","y":0.7,"width":0.3,"height":0.3},"_alignWithScreen":false}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,1000,0,-0.7071067811865475,0,0,0.7071067811865476,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","x":-90},"_is3DNode":true,"_groupIndex":2,"groupIndex":2},{"__type__":"cc.Node","_name":"Camera_debug","_parent":{"__id__":15},"_active":false,"_components":[{"__type__":"cc.Camera","node":{"__id__":17},"_cullingMask":-6,"_clearFlags":2,"_depth":1,"_fov":90,"_nearClip":0.1,"_ortho":false,"_rect":{"__type__":"cc.Rect","y":0.7,"width":0.3,"height":0.3},"_alignWithScreen":false}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[400,400,400,-0.39044836208773004,0.34682897472239405,0.16172900698309878,0.8373192145987589,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","x":-50,"y":45},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"Light","_parent":{"__id__":15},"_components":[{"__type__":"cc.Light","node":{"__id__":18},"_type":3,"_intensity":0.05,"_shadowMaxDepth":1000,"_shadowFrustumSize":50}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,-0.7431448254773942,0,0,0.6691306063588582,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","x":-96},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"ObjectMgr","_parent":{"__id__":15},"_components":[{"__type__":"84906+Q8GxHoaai4zW4rFb/","node":{"__id__":19}},{"__type__":"53a42FwLdhMA6fYw4fQ16O4","node":{"__id__":19},"ModuleFloor":{"__uuid__":"24s4zKX1RA4bs8nG+wX/39"},"ModuleWall":{"__uuid__":"82BjhbGN1DhJGrc2gxdzd+"},"ModuleCore1":{"__uuid__":"c85nT++JdPQboHw9I9EvIe"},"ModuleCore2Straight":{"__uuid__":"31Lv8OlodOKJgQdXWV2Oc/"},"ModuleCore2Perpendicular":{"__uuid__":"b4wWh282lBeK71vXezqcvX"},"ModuleCore3":{"__uuid__":"89ahhpYC9CjqO2c3lzK6uL"},"ModuleCore4":{"__uuid__":"49CUjLCs1KCboNoD7vihEN"},"Player":{"__id__":14},"CameraMiniMap":{"__id__":16}}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"IngameCamera","_parent":{"__id__":14},"_children":[{"__id__":21}],"_components":[{"__type__":"cc.Camera","node":{"__id__":20},"_cullingMask":-6,"_clearFlags":3,"_fov":70,"_nearClip":0.1,"_ortho":false,"_alignWithScreen":false}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":14},"asset":{"__uuid__":"fekXTZH1pAHqkmwmSr34+h"},"fileId":"07UPD7EnlGGqoKHPjHWUrb"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,60,0,0,-0.7071067811865475,0,0.7071067811865476,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","y":-90},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"PlayerSpotLight","_parent":{"__id__":20},"_components":[{"__type__":"cc.Light","node":{"__id__":21},"_type":2,"_intensity":2,"_range":200,"_spotAngle":189,"_shadowMaxDepth":1000,"_shadowFrustumSize":50}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":14},"asset":{"__uuid__":"fekXTZH1pAHqkmwmSr34+h"},"fileId":"ccEsdgeIFB77j554oHi6Qf"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"MiniMap_MC","_parent":{"__id__":14},"_components":[{"__type__":"cc.Sprite","node":{"__id__":22},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"92IEGERJlG7rfq4bsxVO27"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":14},"asset":{"__uuid__":"fekXTZH1pAHqkmwmSr34+h"},"fileId":"931cPLy9NNbrtbwfmFM5qP"},"_contentSize":{"__type__":"cc.Size","width":21,"height":24},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,-0.5,-0.5,-0.4999999999999999,0.5000000000000001,3,3,3]},"_eulerAngles":{"__type__":"cc.Vec3","x":-90,"y":-90},"_is3DNode":true,"_groupIndex":2,"groupIndex":2},{"__type__":"cc.Node","_name":"Icon360_3D","_parent":{"__id__":10},"_children":[{"__id__":24},{"__id__":26},{"__id__":28}],"_components":[{"__type__":"cc.Widget","node":{"__id__":23},"_target":{"__id__":2},"_alignFlags":18}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":23},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"442IcsxPxDGqtURYe8u10g"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"circle1","_parent":{"__id__":23},"_children":[{"__id__":25}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":23},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"c3jXNEPYhE8p+8GdQY3sHH"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0.13492875228332693,0,0,0.9908553031635167,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","x":15.509},"_is3DNode":true},{"__type__":"cc.Node","_name":"ArrowCircle","_parent":{"__id__":24},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":25},"_materials":[{"__uuid__":"f3K+lz3y5GkKJ0NFFMX4iZ"}],"_mesh":{"__uuid__":"a17y/JnFdBio9pa+2aeg5/"},"_enableAutoBatch":true},{"__type__":"cc.Animation","node":{"__id__":25},"_defaultClip":{"__uuid__":"f7XozBMcpB2LjwZSTZeRXt"},"_clips":[{"__uuid__":"f7XozBMcpB2LjwZSTZeRXt"}],"playOnLoad":true}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":23},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"e6d9AHwXtHw73g5KCnv6YO"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,10,10,10]},"_is3DNode":true},{"__type__":"cc.Node","_name":"circle2","_parent":{"__id__":23},"_children":[{"__id__":27}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":23},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"1bqKN03dJNqLCQqGYI1YU7"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,-0.3700408577474686,-0.6025527060743464,-0.6025527060743463,0.37004085774746864,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","x":-90,"y":-116.89},"_is3DNode":true},{"__type__":"cc.Node","_name":"ArrowCircle","_parent":{"__id__":26},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":27},"_materials":[{"__uuid__":"f3K+lz3y5GkKJ0NFFMX4iZ"}],"_mesh":{"__uuid__":"a17y/JnFdBio9pa+2aeg5/"},"_enableAutoBatch":true},{"__type__":"cc.Animation","node":{"__id__":27},"_defaultClip":{"__uuid__":"f7XozBMcpB2LjwZSTZeRXt"},"_clips":[{"__uuid__":"f7XozBMcpB2LjwZSTZeRXt"}],"playOnLoad":true}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":23},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"95s1deRVNIypqI+Gwc3+jf"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0.1474382766936854,0.9890712585883771,10,10,10]},"_eulerAngles":{"__type__":"cc.Vec3","z":16.957},"_is3DNode":true},{"__type__":"cc.Node","_name":"360degrees","_parent":{"__id__":23},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":28},"_materials":[{"__uuid__":"8fdHOVcEhNG6EpvjwUvGaL"}],"_mesh":{"__uuid__":"a17y/JnFdBio9pa+2aeg5/"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":23},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"47gTq5yDVG07FDQ7ebJqBI"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0.7071067811865475,0,0,0.7071067811865476,6,6,3]},"_eulerAngles":{"__type__":"cc.Vec3","x":90},"_is3DNode":true}],{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":1536},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":48}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":1536,"length":264}}],"_minPos":{"__type__":"cc.Vec3","x":-0.0118083665147424,"y":-0.0118086859583855,"z":-0.0500000081956387},"_maxPos":{"__type__":"cc.Vec3","x":0.0118083478882909,"y":0.0118086831644177,"z":0.0500000081956387}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"abwstieFJFJakN1HRIe4jy"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"diffuseTexture":{"__uuid__":"a4XC6e27FNgq7obun07O/i"}}},[{"__type__":"cc.Prefab","_name":"module_wall","data":{"__id__":1}},{"__type__":"cc.Node","_name":"module_wall","_children":[{"__id__":2},{"__id__":4}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"82BjhbGN1DhJGrc2gxdzd+"},"fileId":"74WfrEIQxE1qi+sfFmfWcv"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"RootNode","_parent":{"__id__":1},"_children":[{"__id__":3}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"82BjhbGN1DhJGrc2gxdzd+"},"fileId":"3eQzKizbZMHrZv885/inZh"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,10,10,10]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"core_1","_parent":{"__id__":2},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":3},"_materials":[{"__uuid__":"2dKxeXh6FIBpYxIyWfakjM"}],"_mesh":{"__uuid__":"41p9IfarlG7IDkMHlxyEQU"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"82BjhbGN1DhJGrc2gxdzd+"},"fileId":"d1fqdB7r9CF7/RTWegovfX"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,5,0,-0.5,0.5,0.4999999999999999,0.5000000000000001,100,100,100]},"_eulerAngles":{"__type__":"cc.Vec3","x":-90,"y":90},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"MiniMap_Wall","_parent":{"__id__":1},"_components":[{"__type__":"cc.Sprite","node":{"__id__":4},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"d8jZI0JqtFJIKkvjvgqVal"},"_sizeMode":0}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"82BjhbGN1DhJGrc2gxdzd+"},"fileId":"acoN1UenxOjIgShwnx1Iay"},"_contentSize":{"__type__":"cc.Size","width":10,"height":100},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0.5,0.5,-0.4999999999999999,0.5000000000000001,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","x":90,"y":90},"_is3DNode":true,"_groupIndex":2,"groupIndex":2}],{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":1792},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":56}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":1792,"length":288}}],"_minPos":{"__type__":"cc.Vec3","x":-0.0194608066231012,"y":-0.0194792486727238,"z":-0.050000011920929},"_maxPos":{"__type__":"cc.Vec3","x":0.0194608010351658,"y":0.019479239359498,"z":0.050000011920929}},[{"__type__":"cc.Prefab","_name":"module_core_3","data":{"__id__":1}},{"__type__":"cc.Node","_name":"module_core_3","_children":[{"__id__":2}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"89ahhpYC9CjqO2c3lzK6uL"},"fileId":"46+SrQ1j1LELrTkJaStFt8"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"RootNode","_parent":{"__id__":1},"_children":[{"__id__":3}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"89ahhpYC9CjqO2c3lzK6uL"},"fileId":"bd9YsaLpVDaqA/HTsN8ITT"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,10,10,10]},"_is3DNode":true},{"__type__":"cc.Node","_name":"core_5","_parent":{"__id__":2},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":3},"_materials":[{"__uuid__":"c4eROEoWtAYJ5JyiYj3mIL"}],"_mesh":{"__uuid__":"45n/O0pO9ORqTO85gEKNSr"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"89ahhpYC9CjqO2c3lzK6uL"},"fileId":"67f3tF2lNEgK/m7r56vYsD"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0.76,5,0,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17,100,100,100]},"_eulerAngles":{"__type__":"cc.Vec3","x":-90,"y":180},"_is3DNode":true}],{"__type__":"cc.Material","_name":"360degrees","_effectAsset":{"__uuid__":"6dkeWRTOBGXICfYQ7JUBnG"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseTexture":{"__uuid__":"d9y/XhPDxDiKX8YRPkz8YX"}}},{"__type__":"cc.SpriteFrame","content":{"name":"MiniMap_MC","texture":"4e+3fpLeRNlIZEpHpSTehr","rect":[0,0,21,24],"offset":[0,0],"originalSize":[21,24],"capInsets":[0,0,0,0]}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"abwstieFJFJakN1HRIe4jy"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"diffuseTexture":{"__uuid__":"a4XC6e27FNgq7obun07O/i"}}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":3872},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":121}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":3872,"length":1200}}],"_minPos":{"__type__":"cc.Vec3","x":-5,"z":-5},"_maxPos":{"__type__":"cc.Vec3","x":5,"z":5}},{"__type__":"cc.EffectAsset","_name":"builtin-phong","techniques":[{"passes":[{"rasterizerState":{"cullMode":1029},"program":"builtin-phong|phong-vs|phong-fs","depthStencilState":{"depthTest":true,"depthWrite":true},"properties":{"alphaThreshold":{"value":[0.5],"type":13},"mainTiling":{"value":[1,1],"type":14},"mainOffset":{"value":[0,0],"type":14},"diffuseColor":{"value":[1,1,1,1],"inspector":{"type":"color"},"type":16},"diffuseTexture":{"value":"white","type":29},"specularColor":{"value":[1,1,1,1],"inspector":{"type":"color"},"type":16},"specularTexture":{"value":"white","type":29},"emissiveColor":{"value":[0,0,0,1],"inspector":{"type":"color"},"type":16},"emissiveTexture":{"value":"white","type":29},"glossiness":{"value":[10],"type":13},"normalTexture":{"value":"white","type":29}}}]},{"stages":["shadowcast"],"passes":[{"rasterizerState":{"cullMode":1029},"program":"builtin-phong|shadow-map-vs|shadow-map-fs","depthStencilState":{"depthTest":true,"depthWrite":true}}]}],"shaders":[{"hash":1292388708,"glsl3":{"vert":"\nprecision highp float;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nstruct StandardAttributes {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\n\nin vec3 a_position;\n\n#if CC_USE_ATTRIBUTE_UV0\nin vec2 a_uv0;\n#endif\n\n#if CC_USE_ATTRIBUTE_COLOR\nin vec4 a_color;\n#endif\n\n#if CC_USE_ATTRIBUTE_NORMAL\nin vec3 a_normal;\n#endif\n\n#if CC_USE_ATTRIBUTE_TANGENT\nin vec4 a_tangent;\n#endif\n\nvoid CCAttribute (out StandardAttributes attr) {\n  attr.position = vec4(a_position, 1.0);\n\n  #if CC_USE_ATTRIBUTE_UV0\n    attr.uv = a_uv0;\n  #else\n    attr.uv = vec2(0.0);\n  #endif\n  \n  #if CC_USE_ATTRIBUTE_COLOR\n    attr.color = a_color;\n  #else\n    attr.color = vec4(1.0);\n  #endif\n  \n  #if CC_USE_ATTRIBUTE_NORMAL\n    attr.normal = a_normal;\n  #else\n    attr.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n\n  #if CC_USE_ATTRIBUTE_TANGENT\n    attr.tangent = a_tangent;\n  #else\n    attr.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\n\n#if CC_USE_SKINNING\n\n#if CC_USE_SKINNING\n\n  in vec4 a_weights;\n  in vec4 a_joints;\n\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 cc_jointsTextureSize;\n    }\n    uniform sampler2D cc_jointsTexture;\n\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform CC_JOINT_MATRIX {\n      mat4 cc_jointMatrices[50];\n    }\n\n    mat4 getBoneMatrix(const in float i) {\n      return cc_jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\n  void CCSkin(inout StandardAttributes attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0)).xyz;\n    attr.tangent = m * attr.tangent;\n  }\n#endif\n\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\n\nvoid CCAttrToInput (in StandardAttributes attr, out StandardVertInput In) {\n  In.position = attr.position;\n  In.normal = attr.normal;\n  In.tangent = attr.tangent;\n  In.uv = attr.uv;\n  In.color = attr.color;\n}\n\nvoid CCVertInput (out StandardVertInput In) {\n  StandardAttributes attr;\n  CCAttribute(attr);\n  #if CC_USE_SKINNING\n    CCSkin(attr);\n  #endif\n  CCAttrToInput(attr, In);\n}\n\n#if CC_USE_SHADOW_MAP \n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n\n  };\n  uniform sampler2D cc_shadow_map[2];\n\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\n\n#if 1\n\n  void CLAC_SHADOW (vec3 worldPos) {\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n      v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n      v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n    }\n    #endif\n  }\n\n#else\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\n  float computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n    float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n    return mix(esm, 1.0, mask);\n  }\n\n  float computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n    vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n    vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n    if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n      return 1.0;\n    }\n    float currentDepth = clamp(vDepth, 0.0, 1.0);\n    float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n\n    float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n    return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n  }\n\n  float computeShadow() {\n    float shadow = 1.0;\n    float frustumEdgeFalloff = 0.0;\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n        shadow *= computeShadowESM(cc_shadow_map[i], v_posLightSpace[i], v_depth[i], cc_shadow_info[i].z, cc_shadow_info[i].w, frustumEdgeFalloff);\n    }\n    #endif\n    return shadow;\n  }\n\n#endif\n\nuniform MAIN_TILING {\n  vec2 mainTiling;\n  vec2 mainOffset;\n}\n\nout mediump vec2 v_uv0;\nout lowp vec4 v_color;\nout vec3 v_worldNormal;\nout vec3 v_worldPos;\n\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n\n  vec4 position = In.position;\n  vec4 normal = vec4(In.normal, 0);\n\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_worldNormal = (cc_matWorldIT * normal).xyz;\n  v_color = In.color;\n  v_uv0 = In.uv * mainTiling + mainOffset;\n\n  CLAC_SHADOW(v_worldPos);\n  \n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}\n","frag":"\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n\n}\n\nvec4 TEXEL_TO_LINEAR (in vec4 color) {\n  #if INPUT_IS_GAMMA\n    return vec4(SRGBToLinear(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\nvec4 LINEAR_TO_OUTPUT_TEXEL (in vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    return vec4(LinearToSRGB(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\nmat4 transposeMat4(in mat4 mat) {\n    vec4 i0 = mat[0];\n    vec4 i1 = mat[1];\n    vec4 i2 = mat[2];\n    vec4 i3 = mat[3];\n    return mat4(vec4(i0.x, i1.x, i2.x, i3.x),\n                vec4(i0.y, i1.y, i2.y, i3.y),\n                vec4(i0.z, i1.z, i2.z, i3.z),\n                vec4(i0.w, i1.w, i2.w, i3.w));\n}\n\n#if USE_NORMAL_TEXTURE\n\n  uniform sampler2D normalTexture;\n\n#endif\n\nvoid CALC_NORMAL (inout vec3 normal, in vec3 worldPos, in vec2 uv) {\n  #if USE_NORMAL_TEXTURE\n\n  #endif\n}\n\nuniform DIFFUSE {\n  lowp vec4 diffuseColor;\n};\n\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color, in vec2 uv) {\n  #if USE_DIFFUSE_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 diffuseTextureColor = texture2D(diffuseTexture, uv);\n    #if CC_USE_ALPHA_ATLAS_DIFFUSETEXTURE\n      diffuseTextureColor.a *= texture2D(diffuseTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    color *= TEXEL_TO_LINEAR(diffuseTextureColor);\n  #endif\n}\n\nvoid CALC_DIFFUSE (inout vec4 color, in vec2 uv) {\n  color *= diffuseColor;\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(color, uv);\n}\n\nvoid CALC_DIFFUSE (inout vec4 color) {\n  color *= diffuseColor;\n}\n\n#if USE_SPECULAR\n  uniform SPECULAR {\n    lowp vec4 specularColor;\n  };\n\n  #if USE_SPECULAR_TEXTURE\n    uniform sampler2D specularTexture;\n  #endif\n\n#endif\n\nvoid MULTIPLY_SPECULAR_TEXTRUE_COLOR (inout vec3 color, in vec2 uv) {\n  #if USE_SPECULAR_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 specularTextureColor = texture2D(specularTexture, uv);\n    specularTextureColor = TEXEL_TO_LINEAR(specularTextureColor);\n    color *= specularTextureColor.rgb;\n  #endif\n}\n\nvoid CALC_SPECULAR (inout vec3 specular, in vec2 uv) {\n  #if USE_SPECULAR\n    specular = specularColor.xyz;\n    MULTIPLY_SPECULAR_TEXTRUE_COLOR(specular, uv);\n  #endif\n}\n\nvoid CALC_SPECULAR (inout vec3 specular) {\n  #if USE_SPECULAR\n    specular = specularColor.xyz;\n  #endif\n}\n\n#if USE_EMISSIVE\n  uniform EMISSIVE {\n    lowp vec4 emissiveColor;\n  };\n\n  #if USE_EMISSIVE_TEXTURE\n    uniform sampler2D emissiveTexture;\n  #endif\n\n#endif\n\nvoid MULTIPLY_EMISSIVE_TEXTRUE_COLOR (inout vec3 color, in vec2 uv) {\n  #if USE_EMISSIVE_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 emissiveTextureColor = texture2D(emissiveTexture, uv);\n    #if CC_USE_ALPHA_ATLAS_EMISSIVETEXTURE\n      emissiveTextureColor.a *= texture2D(emissiveTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    emissiveTextureColor = TEXEL_TO_LINEAR(emissiveTextureColor);\n    color *= emissiveTextureColor.rgb;\n  #endif\n}\n\nvoid CALC_EMISSIVE (inout vec3 emissive, in vec2 uv) {\n  #if USE_EMISSIVE\n    emissive = emissiveColor.xyz;\n    MULTIPLY_EMISSIVE_TEXTRUE_COLOR(emissive, uv);\n  #endif\n}\n\nvoid CALC_EMISSIVE (inout vec3 emissive) {\n  #if USE_EMISSIVE\n    emissive = emissiveColor.xyz;\n  #endif\n}\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec3 v_worldNormal;\nin vec3 v_worldPos;\nin mediump vec2 v_uv0;\nin lowp vec4 v_color;\n\n#if CC_NUM_DIR_LIGHTS > 0 || CC_NUM_POINT_LIGHTS > 0 || CC_NUM_SPOT_LIGHTS > 0 || CC_NUM_AMBIENT_LIGHTS > 0\nuniform CCLIGHTS {\n  vec4 cc_dirLightDirection[4];\n\n  vec4 cc_dirLightColor[4];\n\n  vec4 cc_pointLightPositionAndRange[4];\n\n  vec4 cc_pointLightColor[4];\n\n  vec4 cc_spotLightPositionAndRange[4];\n\n  vec4 cc_spotLightDirection[4];\n\n  vec4 cc_spotLightColor[4];\n\n  vec4 cc_ambientColor[4];\n\n};\n\n#endif\n\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n};\n\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  return ret;\n}\n\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  \n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  return ret;\n}\n\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  \n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  return ret;\n}\n\n#if CC_USE_SHADOW_MAP \n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n\n  };\n  uniform sampler2D cc_shadow_map[2];\n\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\n\n#if 0\n\n  void CLAC_SHADOW (vec3 worldPos) {\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n      v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n      v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n    }\n    #endif\n  }\n\n#else\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\n  float computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n    float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n    return mix(esm, 1.0, mask);\n  }\n\n  float computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n    vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n    vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n    if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n      return 1.0;\n    }\n    float currentDepth = clamp(vDepth, 0.0, 1.0);\n    float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n\n    float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n    return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n  }\n\n  float computeShadow() {\n    float shadow = 1.0;\n    float frustumEdgeFalloff = 0.0;\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n        shadow *= computeShadowESM(cc_shadow_map[i], v_posLightSpace[i], v_depth[i], cc_shadow_info[i].z, cc_shadow_info[i].w, frustumEdgeFalloff);\n    }\n    #endif\n    return shadow;\n  }\n\n#endif\n\nuniform PHONG {\n  float glossiness;\n}\n\nstruct PhongMaterial {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n};\n\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\n\nvoid brdf (inout Lighting result, LightInfo info, vec3 normal, vec3 viewDirection, float glossiness) {\n  float ndh = 0.0;\n\n  vec3 halfDir = normalize(viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, glossiness * 128.0));\n\n  vec3 diffuse = info.radiance * max(0.0, dot(normal, info.lightDir));\n  vec3 specular = info.radiance * NdotH;\n\n  result.diffuse += diffuse;\n  result.specular += specular;\n}\n\nLighting getPhongLighting (vec3 normal, vec3 worldPos, vec3 viewDirection, float glossiness) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n\n  #if CC_NUM_DIR_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_DIR_LIGHTS; i++) {\n      LightInfo info = computeDirectionalLighting(cc_dirLightDirection[i], cc_dirLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_POINT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_POINT_LIGHTS; i++) {\n      LightInfo info = computePointLighting(worldPos, cc_pointLightPositionAndRange[i], cc_pointLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_SPOT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_SPOT_LIGHTS; i++) {\n      LightInfo info = computeSpotLighting(worldPos, cc_spotLightPositionAndRange[i], cc_spotLightDirection[i], cc_spotLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_AMBIENT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_AMBIENT_LIGHTS; i++) {\n      result.diffuse += cc_ambientColor[i].rgb;\n    }\n  #endif\n\n  return result;\n}\n\nvec4 composePhongShading (Lighting lighting, PhongMaterial mtl) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n\n  o.rgb = lighting.diffuse * mtl.diffuse;\n  \n  #if USE_EMISSIVE\n    o.rgb += mtl.emissive;\n  #endif\n\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * mtl.specular;\n  #endif\n  \n  #if CC_USE_SHADOW_MAP\n    o.rgb *= computeShadow();\n  #endif\n\n  o.a = mtl.opacity;\n\n  return o;\n}\n\nvoid CALC_PHONG_LIGHTING (inout vec4 outColor, in PhongMaterial material, in vec3 normal, in vec3 worldPosition, in vec3 viewDirection) {\n  Lighting phongLighting = getPhongLighting(normal, worldPosition, viewDirection, glossiness);\n  outColor = composePhongShading(phongLighting, material);\n}\n\nvoid main () {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  \n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n\n  #if USE_DIFFUSE_TEXTURE\n    CALC_DIFFUSE(diffuse, v_uv0);\n  #else\n    CALC_DIFFUSE(diffuse);\n  #endif\n\n  ALPHA_TEST(diffuse);\n\n  PhongMaterial material;\n  material.diffuse = diffuse.rgb;\n  material.opacity = diffuse.a;\n\n  #if USE_EMISSIVE_TEXTURE\n    CALC_EMISSIVE(material.emissive, v_uv0);\n  #else\n    CALC_EMISSIVE(material.emissive);\n  #endif\n\n  #if USE_SPECULAR_TEXTURE\n    CALC_SPECULAR(material.specular, v_uv0);\n  #else\n    CALC_SPECULAR(material.specular);\n  #endif\n\n  vec3 viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  vec4 phongColor;\n\n  vec3 normal = normalize(v_worldNormal);\n  #if USE_NORMAL_TEXTURE\n    CALC_NORMAL(normal, v_worldPos, v_uv0);\n  #endif\n\n  CALC_PHONG_LIGHTING(phongColor, material, normal, v_worldPos, viewDirection);\n\n  gl_FragColor = LINEAR_TO_OUTPUT_TEXEL( phongColor );\n}\n"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matWorldIT;\nuniform mat4 cc_matViewProj;\n\nstruct StandardAttributes {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\n\nattribute vec3 a_position;\n\n#if CC_USE_ATTRIBUTE_UV0\nattribute vec2 a_uv0;\n#endif\n\n#if CC_USE_ATTRIBUTE_COLOR\nattribute vec4 a_color;\n#endif\n\n#if CC_USE_ATTRIBUTE_NORMAL\nattribute vec3 a_normal;\n#endif\n\n#if CC_USE_ATTRIBUTE_TANGENT\nattribute vec4 a_tangent;\n#endif\n\nvoid CCAttribute (out StandardAttributes attr) {\n  attr.position = vec4(a_position, 1.0);\n\n  #if CC_USE_ATTRIBUTE_UV0\n    attr.uv = a_uv0;\n  #else\n    attr.uv = vec2(0.0);\n  #endif\n  \n  #if CC_USE_ATTRIBUTE_COLOR\n    attr.color = a_color;\n  #else\n    attr.color = vec4(1.0);\n  #endif\n  \n  #if CC_USE_ATTRIBUTE_NORMAL\n    attr.normal = a_normal;\n  #else\n    attr.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n\n  #if CC_USE_ATTRIBUTE_TANGENT\n    attr.tangent = a_tangent;\n  #else\n    attr.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\n\n#if CC_USE_SKINNING\n\n#if CC_USE_SKINNING\n\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 cc_jointsTextureSize;\n    uniform sampler2D cc_jointsTexture;\n\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 cc_jointMatrices[50];\nmat4 getBoneMatrix(const in float i) {\n      return cc_jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\n  void CCSkin(inout StandardAttributes attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0)).xyz;\n    attr.tangent = m * attr.tangent;\n  }\n#endif\n\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\n\nvoid CCAttrToInput (in StandardAttributes attr, out StandardVertInput In) {\n  In.position = attr.position;\n  In.normal = attr.normal;\n  In.tangent = attr.tangent;\n  In.uv = attr.uv;\n  In.color = attr.color;\n}\n\nvoid CCVertInput (out StandardVertInput In) {\n  StandardAttributes attr;\n  CCAttribute(attr);\n  #if CC_USE_SKINNING\n    CCSkin(attr);\n  #endif\n  CCAttrToInput(attr, In);\n}\n\n#if CC_USE_SHADOW_MAP \n  uniform mat4 cc_shadow_lightViewProjMatrix[2];\nuniform vec4 cc_shadow_info[2];\n  uniform sampler2D cc_shadow_map[2];\n\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\n\n#if 1\n\n  void CLAC_SHADOW (vec3 worldPos) {\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n      v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n      v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n    }\n    #endif\n  }\n\n#else\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\n  float computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n    float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n    return mix(esm, 1.0, mask);\n  }\n\n  float computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n    vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n    vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n    if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n      return 1.0;\n    }\n    float currentDepth = clamp(vDepth, 0.0, 1.0);\n    float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n\n    float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n    return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n  }\n\n  float computeShadow() {\n    float shadow = 1.0;\n    float frustumEdgeFalloff = 0.0;\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n        shadow *= computeShadowESM(cc_shadow_map[i], v_posLightSpace[i], v_depth[i], cc_shadow_info[i].z, cc_shadow_info[i].w, frustumEdgeFalloff);\n    }\n    #endif\n    return shadow;\n  }\n\n#endif\n\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\n\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n\n  vec4 position = In.position;\n  vec4 normal = vec4(In.normal, 0);\n\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_worldNormal = (cc_matWorldIT * normal).xyz;\n  v_color = In.color;\n  v_uv0 = In.uv * mainTiling + mainOffset;\n\n  CLAC_SHADOW(v_worldPos);\n  \n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}\n","frag":"\nprecision highp float;\nuniform vec4 cc_cameraPos;\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n\n}\n\nvec4 TEXEL_TO_LINEAR (in vec4 color) {\n  #if INPUT_IS_GAMMA\n    return vec4(SRGBToLinear(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\nvec4 LINEAR_TO_OUTPUT_TEXEL (in vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    return vec4(LinearToSRGB(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\nmat4 transposeMat4(in mat4 mat) {\n    vec4 i0 = mat[0];\n    vec4 i1 = mat[1];\n    vec4 i2 = mat[2];\n    vec4 i3 = mat[3];\n    return mat4(vec4(i0.x, i1.x, i2.x, i3.x),\n                vec4(i0.y, i1.y, i2.y, i3.y),\n                vec4(i0.z, i1.z, i2.z, i3.z),\n                vec4(i0.w, i1.w, i2.w, i3.w));\n}\n\n#if USE_NORMAL_TEXTURE\n\n  uniform sampler2D normalTexture;\n\n#endif\n\nvoid CALC_NORMAL (inout vec3 normal, in vec3 worldPos, in vec2 uv) {\n  #if USE_NORMAL_TEXTURE\n\n  #endif\n}\n\nuniform lowp vec4 diffuseColor;\n\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color, in vec2 uv) {\n  #if USE_DIFFUSE_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 diffuseTextureColor = texture2D(diffuseTexture, uv);\n    #if CC_USE_ALPHA_ATLAS_DIFFUSETEXTURE\n      diffuseTextureColor.a *= texture2D(diffuseTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    color *= TEXEL_TO_LINEAR(diffuseTextureColor);\n  #endif\n}\n\nvoid CALC_DIFFUSE (inout vec4 color, in vec2 uv) {\n  color *= diffuseColor;\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(color, uv);\n}\n\nvoid CALC_DIFFUSE (inout vec4 color) {\n  color *= diffuseColor;\n}\n\n#if USE_SPECULAR\n  uniform lowp vec4 specularColor;\n\n  #if USE_SPECULAR_TEXTURE\n    uniform sampler2D specularTexture;\n  #endif\n\n#endif\n\nvoid MULTIPLY_SPECULAR_TEXTRUE_COLOR (inout vec3 color, in vec2 uv) {\n  #if USE_SPECULAR_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 specularTextureColor = texture2D(specularTexture, uv);\n    specularTextureColor = TEXEL_TO_LINEAR(specularTextureColor);\n    color *= specularTextureColor.rgb;\n  #endif\n}\n\nvoid CALC_SPECULAR (inout vec3 specular, in vec2 uv) {\n  #if USE_SPECULAR\n    specular = specularColor.xyz;\n    MULTIPLY_SPECULAR_TEXTRUE_COLOR(specular, uv);\n  #endif\n}\n\nvoid CALC_SPECULAR (inout vec3 specular) {\n  #if USE_SPECULAR\n    specular = specularColor.xyz;\n  #endif\n}\n\n#if USE_EMISSIVE\n  uniform lowp vec4 emissiveColor;\n\n  #if USE_EMISSIVE_TEXTURE\n    uniform sampler2D emissiveTexture;\n  #endif\n\n#endif\n\nvoid MULTIPLY_EMISSIVE_TEXTRUE_COLOR (inout vec3 color, in vec2 uv) {\n  #if USE_EMISSIVE_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 emissiveTextureColor = texture2D(emissiveTexture, uv);\n    #if CC_USE_ALPHA_ATLAS_EMISSIVETEXTURE\n      emissiveTextureColor.a *= texture2D(emissiveTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    emissiveTextureColor = TEXEL_TO_LINEAR(emissiveTextureColor);\n    color *= emissiveTextureColor.rgb;\n  #endif\n}\n\nvoid CALC_EMISSIVE (inout vec3 emissive, in vec2 uv) {\n  #if USE_EMISSIVE\n    emissive = emissiveColor.xyz;\n    MULTIPLY_EMISSIVE_TEXTRUE_COLOR(emissive, uv);\n  #endif\n}\n\nvoid CALC_EMISSIVE (inout vec3 emissive) {\n  #if USE_EMISSIVE\n    emissive = emissiveColor.xyz;\n  #endif\n}\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\n\n#if CC_NUM_DIR_LIGHTS > 0 || CC_NUM_POINT_LIGHTS > 0 || CC_NUM_SPOT_LIGHTS > 0 || CC_NUM_AMBIENT_LIGHTS > 0\nuniform vec4 cc_dirLightDirection[4];\nuniform vec4 cc_dirLightColor[4];\nuniform vec4 cc_pointLightPositionAndRange[4];\nuniform vec4 cc_pointLightColor[4];\nuniform vec4 cc_spotLightPositionAndRange[4];\nuniform vec4 cc_spotLightDirection[4];\nuniform vec4 cc_spotLightColor[4];\nuniform vec4 cc_ambientColor[4];\n\n#endif\n\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n};\n\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  return ret;\n}\n\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  \n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  return ret;\n}\n\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  \n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  return ret;\n}\n\n#if CC_USE_SHADOW_MAP \n  uniform mat4 cc_shadow_lightViewProjMatrix[2];\nuniform vec4 cc_shadow_info[2];\n  uniform sampler2D cc_shadow_map[2];\n\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\n\n#if 0\n\n  void CLAC_SHADOW (vec3 worldPos) {\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n      v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n      v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n    }\n    #endif\n  }\n\n#else\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\n  float computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n    float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n    return mix(esm, 1.0, mask);\n  }\n\n  float computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n    vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n    vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n    if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n      return 1.0;\n    }\n    float currentDepth = clamp(vDepth, 0.0, 1.0);\n    float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n\n    float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n    return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n  }\n\n  float computeShadow() {\n    float shadow = 1.0;\n    float frustumEdgeFalloff = 0.0;\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n        shadow *= computeShadowESM(cc_shadow_map[i], v_posLightSpace[i], v_depth[i], cc_shadow_info[i].z, cc_shadow_info[i].w, frustumEdgeFalloff);\n    }\n    #endif\n    return shadow;\n  }\n\n#endif\n\nuniform float glossiness;\nstruct PhongMaterial {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n};\n\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\n\nvoid brdf (inout Lighting result, LightInfo info, vec3 normal, vec3 viewDirection, float glossiness) {\n  float ndh = 0.0;\n\n  vec3 halfDir = normalize(viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, glossiness * 128.0));\n\n  vec3 diffuse = info.radiance * max(0.0, dot(normal, info.lightDir));\n  vec3 specular = info.radiance * NdotH;\n\n  result.diffuse += diffuse;\n  result.specular += specular;\n}\n\nLighting getPhongLighting (vec3 normal, vec3 worldPos, vec3 viewDirection, float glossiness) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n\n  #if CC_NUM_DIR_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_DIR_LIGHTS; i++) {\n      LightInfo info = computeDirectionalLighting(cc_dirLightDirection[i], cc_dirLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_POINT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_POINT_LIGHTS; i++) {\n      LightInfo info = computePointLighting(worldPos, cc_pointLightPositionAndRange[i], cc_pointLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_SPOT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_SPOT_LIGHTS; i++) {\n      LightInfo info = computeSpotLighting(worldPos, cc_spotLightPositionAndRange[i], cc_spotLightDirection[i], cc_spotLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_AMBIENT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_AMBIENT_LIGHTS; i++) {\n      result.diffuse += cc_ambientColor[i].rgb;\n    }\n  #endif\n\n  return result;\n}\n\nvec4 composePhongShading (Lighting lighting, PhongMaterial mtl) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n\n  o.rgb = lighting.diffuse * mtl.diffuse;\n  \n  #if USE_EMISSIVE\n    o.rgb += mtl.emissive;\n  #endif\n\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * mtl.specular;\n  #endif\n  \n  #if CC_USE_SHADOW_MAP\n    o.rgb *= computeShadow();\n  #endif\n\n  o.a = mtl.opacity;\n\n  return o;\n}\n\nvoid CALC_PHONG_LIGHTING (inout vec4 outColor, in PhongMaterial material, in vec3 normal, in vec3 worldPosition, in vec3 viewDirection) {\n  Lighting phongLighting = getPhongLighting(normal, worldPosition, viewDirection, glossiness);\n  outColor = composePhongShading(phongLighting, material);\n}\n\nvoid main () {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  \n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n\n  #if USE_DIFFUSE_TEXTURE\n    CALC_DIFFUSE(diffuse, v_uv0);\n  #else\n    CALC_DIFFUSE(diffuse);\n  #endif\n\n  ALPHA_TEST(diffuse);\n\n  PhongMaterial material;\n  material.diffuse = diffuse.rgb;\n  material.opacity = diffuse.a;\n\n  #if USE_EMISSIVE_TEXTURE\n    CALC_EMISSIVE(material.emissive, v_uv0);\n  #else\n    CALC_EMISSIVE(material.emissive);\n  #endif\n\n  #if USE_SPECULAR_TEXTURE\n    CALC_SPECULAR(material.specular, v_uv0);\n  #else\n    CALC_SPECULAR(material.specular);\n  #endif\n\n  vec3 viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  vec4 phongColor;\n\n  vec3 normal = normalize(v_worldNormal);\n  #if USE_NORMAL_TEXTURE\n    CALC_NORMAL(normal, v_worldPos, v_uv0);\n  #endif\n\n  CALC_PHONG_LIGHTING(phongColor, material, normal, v_worldPos, viewDirection);\n\n  gl_FragColor = LINEAR_TO_OUTPUT_TEXEL( phongColor );\n}\n"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CC_SHADOW","defines":["CC_USE_SHADOW_MAP"]},{"name":"CCLIGHTS","defines":[]}],"samplers":[{"name":"cc_shadow_map","defines":["CC_USE_SHADOW_MAP"]}]},"locals":{"blocks":[{"name":"CCLocal","defines":[]},{"name":"CC_JOINT_MATRIX","defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"cc_jointsTexture","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}},"defines":[{"name":"CC_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_TANGENT","type":"boolean","defines":[]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"CC_USE_SHADOW_MAP","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":[]},{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_DIFFUSETEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE","CC_USE_ATTRIBUTE_UV0"]},{"name":"USE_SPECULAR","type":"boolean","defines":[]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_EMISSIVETEXTURE","type":"boolean","defines":["USE_EMISSIVE_TEXTURE","CC_USE_ATTRIBUTE_UV0"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_NUM_DIR_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_NUM_POINT_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_NUM_SPOT_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_NUM_AMBIENT_LIGHTS","type":"number","defines":[],"range":[0,3]}],"blocks":[{"name":"SKINNING","members":[{"name":"cc_jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"],"binding":0},{"name":"MAIN_TILING","members":[{"name":"mainTiling","type":14,"count":1},{"name":"mainOffset","type":14,"count":1}],"defines":[],"binding":1},{"name":"DIFFUSE","members":[{"name":"diffuseColor","type":16,"count":1}],"defines":[],"binding":2},{"name":"SPECULAR","members":[{"name":"specularColor","type":16,"count":1}],"defines":["USE_SPECULAR"],"binding":3},{"name":"EMISSIVE","members":[{"name":"emissiveColor","type":16,"count":1}],"defines":["USE_EMISSIVE"],"binding":4},{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":5},{"name":"PHONG","members":[{"name":"glossiness","type":13,"count":1}],"defines":[],"binding":6}],"samplers":[{"name":"normalTexture","type":29,"count":1,"defines":["USE_NORMAL_TEXTURE"],"binding":30},{"name":"diffuseTexture","type":29,"count":1,"defines":["USE_DIFFUSE_TEXTURE"],"binding":31},{"name":"specularTexture","type":29,"count":1,"defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"],"binding":32},{"name":"emissiveTexture","type":29,"count":1,"defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"],"binding":33}],"dependencies":{},"name":"builtin-phong|phong-vs|phong-fs"},{"hash":1437876711,"glsl3":{"vert":"\nprecision highp float;\n\nin vec3 a_position;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CC_SHADOW_MAP {\n  mat4  cc_shadow_map_lightViewProjMatrix;\n  vec4  cc_shadow_map_info;\n\n  float cc_shadow_map_bias;\n};\n\nout float v_depth;\n\n#if CC_USE_SKINNING\n\n  in vec4 a_weights;\n  in vec4 a_joints;\n\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 cc_jointsTextureSize;\n    }\n    uniform sampler2D cc_jointsTexture;\n\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform CC_JOINT_MATRIX {\n      mat4 cc_jointMatrices[50];\n    }\n\n    mat4 getBoneMatrix(const in float i) {\n      return cc_jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n\n  SKIN_VERTEX(position);\n\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}\n","frag":"\nprecision highp float;\n\nin float v_depth;\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\nvoid main () {\n\n  gl_FragColor = packDepthToRGBA(v_depth);\n\n}\n"},"glsl1":{"vert":"\nprecision highp float;\n\nattribute vec3 a_position;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_shadow_map_lightViewProjMatrix;\nuniform vec4 cc_shadow_map_info;\nuniform float cc_shadow_map_bias;\n\nvarying float v_depth;\n\n#if CC_USE_SKINNING\n\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 cc_jointsTextureSize;\n    uniform sampler2D cc_jointsTexture;\n\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 cc_jointMatrices[50];\nmat4 getBoneMatrix(const in float i) {\n      return cc_jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n\n  SKIN_VERTEX(position);\n\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}\n","frag":"\nprecision highp float;\n\nvarying float v_depth;\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\nvoid main () {\n\n  gl_FragColor = packDepthToRGBA(v_depth);\n\n}\n"},"builtins":{"globals":{"blocks":[{"name":"CC_SHADOW_MAP","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]},{"name":"CC_JOINT_MATRIX","defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"cc_jointsTexture","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}],"blocks":[{"name":"SKINNING","members":[{"name":"cc_jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"],"binding":0}],"samplers":[],"dependencies":{},"name":"builtin-phong|shadow-map-vs|shadow-map-fs"}]},[{"__type__":"cc.Prefab","_name":"module_core_2_perpendicular","data":{"__id__":1}},{"__type__":"cc.Node","_name":"module_core_2_perpendicular","_children":[{"__id__":2}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"b4wWh282lBeK71vXezqcvX"},"fileId":"378gRSZThGh6uzhUOuA6FY"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"RootNode","_parent":{"__id__":1},"_children":[{"__id__":3}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"b4wWh282lBeK71vXezqcvX"},"fileId":"e00W6mrB9NYK7S1e9nR/o7"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,10,10,10]},"_is3DNode":true},{"__type__":"cc.Node","_name":"core_4","_parent":{"__id__":2},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":3},"_materials":[{"__uuid__":"13QDxGGlRLqZ3aUv9jDSr9"}],"_mesh":{"__uuid__":"641SsoWf9GW5pi5h/0+hrg"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"b4wWh282lBeK71vXezqcvX"},"fileId":"c11vA3TXdKlKqEKCfISmeb"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0.76,5,-0.76,-0.7071067811865475,0,0,0.7071067811865476,100,100,100]},"_eulerAngles":{"__type__":"cc.Vec3","x":-90},"_is3DNode":true}],{"__type__":"cc.Material","_effectAsset":{"__uuid__":"abwstieFJFJakN1HRIe4jy"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"diffuseTexture":{"__uuid__":"a4XC6e27FNgq7obun07O/i"}}},[{"__type__":"cc.Prefab","_name":"module_core_1","data":{"__id__":1}},{"__type__":"cc.Node","_name":"module_core_1","_children":[{"__id__":2}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"c85nT++JdPQboHw9I9EvIe"},"fileId":"c44ufY2ttBCYWAJ4+RyH4f"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"RootNode","_parent":{"__id__":1},"_children":[{"__id__":3}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"c85nT++JdPQboHw9I9EvIe"},"fileId":"c0KCxW9QlNxL4B4l822i7C"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,10,10,10]},"_is3DNode":true},{"__type__":"cc.Node","_name":"core_2","_parent":{"__id__":2},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":3},"_materials":[{"__uuid__":"76B1CR+XxHBom/h5PPes9y"}],"_mesh":{"__uuid__":"fb+tRE3hJKsqHXzwmtREvp"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"c85nT++JdPQboHw9I9EvIe"},"fileId":"04g8Sn3xVGiJ0cULJO/bPi"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0.76,5,0,-0.7071067811865475,0,0,0.7071067811865476,100,100,100]},"_eulerAngles":{"__type__":"cc.Vec3","x":-90},"_is3DNode":true}],{"__type__":"cc.SpriteFrame","content":{"name":"MiniMap_Wall","texture":"105PKqXChOFo0g7H20R6Zx","rect":[0,0,5,27],"offset":[0,0],"originalSize":[5,27],"capInsets":[0,0,0,0]}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":128},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":4}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":128,"length":12}}],"_minPos":{"__type__":"cc.Vec3","x":-0.0500000193715096,"y":-0.050000037997961},"_maxPos":{"__type__":"cc.Vec3","x":0.0499999970197678,"y":0.050000037997961}},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_pressed","texture":"b4P/PCArtIdIH38t6mlw8Y","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_normal","texture":"e8Ueib+qJEhL6mXAHdnwbi","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}},{"__type__":"cc.Material","_name":"icon360_Arrow","_effectAsset":{"__uuid__":"6dkeWRTOBGXICfYQ7JUBnG"},"_defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":true},"_props":{"alphaThreshold":0.1,"diffuseTexture":{"__uuid__":"58AWuk+HhCV7BWWifD6/jq"}}},[{"__type__":"cc.Prefab","_name":"Icon360_3D","data":{"__id__":1}},{"__type__":"cc.Node","_name":"Icon360_3D","_children":[{"__id__":2},{"__id__":4},{"__id__":6}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"442IcsxPxDGqtURYe8u10g"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[343.041,87.52,50,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"circle1","_parent":{"__id__":1},"_children":[{"__id__":3}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"c3jXNEPYhE8p+8GdQY3sHH"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0.25881904510252074,0,0,0.9659258262890683,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","x":30},"_is3DNode":true},{"__type__":"cc.Node","_name":"ArrowCircle","_parent":{"__id__":2},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":3},"_materials":[{"__uuid__":"f3K+lz3y5GkKJ0NFFMX4iZ"}],"_mesh":{"__uuid__":"a17y/JnFdBio9pa+2aeg5/"},"_enableAutoBatch":true},{"__type__":"cc.Animation","node":{"__id__":3},"_defaultClip":{"__uuid__":"f7XozBMcpB2LjwZSTZeRXt"},"_clips":[{"__uuid__":"f7XozBMcpB2LjwZSTZeRXt"}],"playOnLoad":true}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"e6d9AHwXtHw73g5KCnv6YO"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,10,10,10]},"_is3DNode":true},{"__type__":"cc.Node","_name":"circle2","_parent":{"__id__":1},"_children":[{"__id__":5}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"1bqKN03dJNqLCQqGYI1YU7"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0.27059805007309856,0.6532814824381882,0.6532814824381883,-0.2705980500730984,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","x":90,"y":45,"z":180},"_is3DNode":true},{"__type__":"cc.Node","_name":"ArrowCircle","_parent":{"__id__":4},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":5},"_materials":[{"__uuid__":"f3K+lz3y5GkKJ0NFFMX4iZ"}],"_mesh":{"__uuid__":"a17y/JnFdBio9pa+2aeg5/"},"_enableAutoBatch":true},{"__type__":"cc.Animation","node":{"__id__":5},"_defaultClip":{"__uuid__":"f7XozBMcpB2LjwZSTZeRXt"},"_clips":[{"__uuid__":"f7XozBMcpB2LjwZSTZeRXt"}],"playOnLoad":true}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"95s1deRVNIypqI+Gwc3+jf"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0.1474382766936854,0.9890712585883771,10,10,10]},"_eulerAngles":{"__type__":"cc.Vec3","z":16.957},"_is3DNode":true},{"__type__":"cc.Node","_name":"360degrees","_parent":{"__id__":1},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":6},"_materials":[{"__uuid__":"8fdHOVcEhNG6EpvjwUvGaL"}],"_mesh":{"__uuid__":"a17y/JnFdBio9pa+2aeg5/"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"f5vbYUtw5CmpnLn4p8KR2l"},"fileId":"47gTq5yDVG07FDQ7ebJqBI"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0.7071067811865475,0,0,0.7071067811865476,6,6,3]},"_eulerAngles":{"__type__":"cc.Vec3","x":90},"_is3DNode":true}],{"__type__":"cc.AnimationClip","_name":"Icon360_Arrow","_duration":0.4166666666666667,"speed":0.1,"wrapMode":38,"curveData":{"props":{"eulerAngles":[{"frame":0,"value":{"__type__":"cc.Vec3"}},{"frame":0.4166666666666667,"value":{"__type__":"cc.Vec3","y":360}}]}}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":384},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":12}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":384,"length":36}}],"_minPos":{"__type__":"cc.Vec3","x":-0.0119186397641897,"y":-0.00413771998137236,"z":-0.050000011920929},"_maxPos":{"__type__":"cc.Vec3","x":0.0119186397641897,"y":0.00413772417232394,"z":0.050000011920929}},[{"__type__":"cc.Prefab","_name":"Player","data":{"__id__":1}},{"__type__":"cc.Node","_name":"Player","_children":[{"__id__":2},{"__id__":4}],"_components":[{"__type__":"f5a32u/er1HiqWV1xVqlRdy","node":{"__id__":1},"_enabled":false,"moveSpeed":50,"wobbingInterval":0.2},{"__type__":"31fd7OfupVBVIQvbmCxk9/k","node":{"__id__":1},"attackStats":{"__type__":"AttackStats"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"fekXTZH1pAHqkmwmSr34+h"},"fileId":"5blN/kGSxFe5tIue374Szy"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[50,0,50,0,0,0,1,1,1,1]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"IngameCamera","_parent":{"__id__":1},"_children":[{"__id__":3}],"_components":[{"__type__":"cc.Camera","node":{"__id__":2},"_cullingMask":-6,"_clearFlags":3,"_fov":70,"_nearClip":0.1,"_ortho":false,"_alignWithScreen":false}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"fekXTZH1pAHqkmwmSr34+h"},"fileId":"07UPD7EnlGGqoKHPjHWUrb"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,60,0,0,-0.7071067811865475,0,0.7071067811865476,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","y":-90},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"PlayerSpotLight","_parent":{"__id__":2},"_components":[{"__type__":"cc.Light","node":{"__id__":3},"_type":2,"_intensity":2,"_range":200,"_spotAngle":189,"_shadowMaxDepth":1000,"_shadowFrustumSize":50}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"fekXTZH1pAHqkmwmSr34+h"},"fileId":"ccEsdgeIFB77j554oHi6Qf"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"MiniMap_MC","_parent":{"__id__":1},"_components":[{"__type__":"cc.Sprite","node":{"__id__":4},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"92IEGERJlG7rfq4bsxVO27"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"fekXTZH1pAHqkmwmSr34+h"},"fileId":"931cPLy9NNbrtbwfmFM5qP"},"_contentSize":{"__type__":"cc.Size","width":21,"height":24},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,-0.5,-0.5,-0.4999999999999999,0.5000000000000001,3,3,3]},"_eulerAngles":{"__type__":"cc.Vec3","x":-90,"y":-90},"_is3DNode":true,"_groupIndex":2,"groupIndex":2}]]